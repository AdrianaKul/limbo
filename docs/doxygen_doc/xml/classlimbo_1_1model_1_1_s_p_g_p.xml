<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classlimbo_1_1model_1_1_s_p_g_p" kind="class" language="C++" prot="public">
    <compoundname>limbo::model::SPGP</compoundname>
    <includes refid="spgp_8hpp" local="no">limbo/experimental/model/spgp.hpp</includes>
    <innerclass refid="structlimbo_1_1model_1_1_s_p_g_p_1_1_hyper_params" prot="public">limbo::model::SPGP::HyperParams</innerclass>
    <templateparamlist>
      <param>
        <type>typename Params</type>
      </param>
      <param>
        <type>typename KernelFunction</type>
      </param>
      <param>
        <type>typename MeanFunction</type>
      </param>
      <param>
        <type>class HyperParamsOptimizer</type>
        <defval><ref refid="structlimbo_1_1opt_1_1_n_l_opt_grad" kindref="compound">opt::NLOptGrad</ref>&lt;Params, nlopt::LD_LBFGS&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1af7732cada911327067204eff96de3d9f" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_m</definition>
        <argsstring></argsstring>
        <name>_m</name>
        <briefdescription>
<para>set on initialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="321" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a6f0bd4953cfe33e3f4fd72161746b5a9" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_dim_in</definition>
        <argsstring></argsstring>
        <name>_dim_in</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="322" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a97860835ae506a735554193f6abf8fb6" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_dim_out</definition>
        <argsstring></argsstring>
        <name>_dim_out</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="323" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a028a497888607c4ed37c98cdfc27ff18" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_del</definition>
        <argsstring></argsstring>
        <name>_del</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="324" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a42930d25a507936b592d97578bcf9d5a" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_samples</definition>
        <argsstring></argsstring>
        <name>_samples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="325" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a5d708f51ec10b13b583c14f4911ae497" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_observations</definition>
        <argsstring></argsstring>
        <name>_observations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="326" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a70d9d83951bc759dea11e107173c4a81" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_observations_zm</definition>
        <argsstring></argsstring>
        <name>_observations_zm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="327" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a70408353da19fdf77ff1a4a21563a49d" prot="private" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_obs_mean</definition>
        <argsstring></argsstring>
        <name>_obs_mean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="328" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a5b9725afd7d8bda848de2cbe355cd6bd" prot="private" static="no" mutable="no">
        <type>MeanFunction</type>
        <definition>MeanFunction limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_mean_function</definition>
        <argsstring></argsstring>
        <name>_mean_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="329" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1ae363a3fd27b8eb151e9f36ac395486f6" prot="private" static="no" mutable="no">
        <type>KernelFunction</type>
        <definition>KernelFunction limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_kernel_function</definition>
        <argsstring></argsstring>
        <name>_kernel_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="330" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a6b5392d0b0a42d80db53d1a19570469d" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_pseudo_samples</definition>
        <argsstring></argsstring>
        <name>_pseudo_samples</name>
        <briefdescription>
<para>set after the hyperparameters calculation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="333" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1ab18b311f4130379eedbce62ba0adb77e" prot="private" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_b</definition>
        <argsstring></argsstring>
        <name>_b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="334" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1ad04af10d900d00bea91acdfa05cb522e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_c</definition>
        <argsstring></argsstring>
        <name>_c</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="335" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a071318d362daf62bafdd53ad0b9a68b7" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_sig</definition>
        <argsstring></argsstring>
        <name>_sig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="336" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a47f66f00a7ebf56f6af21a93c59b90ed" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_Lm</definition>
        <argsstring></argsstring>
        <name>_Lm</name>
        <briefdescription>
<para>calculated in _compute </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="340" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1ad1c26250ae889d68bf2b3e36180b9e77" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_bet</definition>
        <argsstring></argsstring>
        <name>_bet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="341" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a74f5412ac200cddfb897ddb92254dbf9" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_matrixL</definition>
        <argsstring></argsstring>
        <name>_matrixL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="342" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a300d8744cbd6bedfe31438776f840386" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_optimize_init</definition>
        <argsstring></argsstring>
        <name>_optimize_init</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>auxiliary variables </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="345" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1af17f8c7752bdde6160adefff8b472b66" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_optimized</definition>
        <argsstring></argsstring>
        <name>_optimized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="346" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a68ce952249467dade422d8fb3b08eeea" prot="private" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_w_init</definition>
        <argsstring></argsstring>
        <name>_w_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="347" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlimbo_1_1model_1_1_s_p_g_p_1a0465b3427af08498e04be5029ea92afb" prot="private" static="no" mutable="no">
        <type>HyperParamsOptimizer</type>
        <definition>HyperParamsOptimizer limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_hp_optimize</definition>
        <argsstring></argsstring>
        <name>_hp_optimize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="348" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="348" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a7052cad1d905c48e673f2a843d2643c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::SPGP</definition>
        <argsstring>()</argsstring>
        <name>SPGP</name>
        <briefdescription>
<para>useful because the model might be created before knowing anything about the process </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="106" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a6fe55238f690cfba7dc1de3e6ad25ac3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::SPGP</definition>
        <argsstring>(int dim_in, int dim_out)</argsstring>
        <name>SPGP</name>
        <param>
          <type>int</type>
          <declname>dim_in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_out</declname>
        </param>
        <briefdescription>
<para>useful because the model might be created before having samples </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="109" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="109" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a9fd5b3f449fd1a17e8699e9771ceae7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::SPGP</definition>
        <argsstring>(const std::vector&lt; Eigen::VectorXd &gt; &amp;samples, const std::vector&lt; Eigen::VectorXd &gt; &amp;observations)</argsstring>
        <name>SPGP</name>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>observations</declname>
        </param>
        <briefdescription>
<para>useful to construct without optimizing </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="119" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a942a3f77cffebf2210203da69d2329d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::optimize_hyperparams</definition>
        <argsstring>()</argsstring>
        <name>optimize_hyperparams</name>
        <briefdescription>
<para>execute the hyperparameters optimization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="126" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a8113b7d23df0d1c2c7d5190a95490e9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::compute</definition>
        <argsstring>(const std::vector&lt; Eigen::VectorXd &gt; &amp;samples, const std::vector&lt; Eigen::VectorXd &gt; &amp;observations)</argsstring>
        <name>compute</name>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>observations</declname>
        </param>
        <briefdescription>
<para>Compute the <ref refid="classlimbo_1_1model_1_1_s_p_g_p" kindref="compound">SPGP</ref> from samples and observations. This call needs to be explicit! </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="133" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a4e05bf3a425ddd15fb0ad44b28bc2d56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::compute</definition>
        <argsstring>(const std::vector&lt; Eigen::VectorXd &gt; &amp;samples, const Eigen::MatrixXd &amp;observations)</argsstring>
        <name>compute</name>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>observations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="138" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="138" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1acd0309a5bb2380abc49d0fa26db1e631" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::compute</definition>
        <argsstring>(const Eigen::MatrixXd &amp;samples, const Eigen::MatrixXd &amp;observations)</argsstring>
        <name>compute</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>observations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="143" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="143" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a4d983fbcf5c625446065dbc939571c3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::add_sample</definition>
        <argsstring>(const Eigen::VectorXd &amp;sample, const Eigen::VectorXd &amp;observation)</argsstring>
        <name>add_sample</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>sample</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>observation</declname>
        </param>
        <briefdescription>
<para>add sample and recompute the <ref refid="classlimbo_1_1model_1_1_s_p_g_p" kindref="compound">SPGP</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="156" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="156" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a42182a521e79e95b7e9cc4f1cd256650" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::tuple&lt; Eigen::VectorXd, double &gt;</type>
        <definition>std::tuple&lt;Eigen::VectorXd, double&gt; limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::query</definition>
        <argsstring>(const Eigen::VectorXd &amp;v) const </argsstring>
        <name>query</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst return :math:<computeroutput>\mu</computeroutput>, :math:<computeroutput>\sigma^2</computeroutput> (unormalized). If there is no sample, return the value according to the mean function. Using this method instead of separate calls to <ref refid="classlimbo_1_1model_1_1_s_p_g_p_1a93dc0f879b84a302382edf103fa00da9" kindref="member">mu()</ref> and <ref refid="classlimbo_1_1model_1_1_s_p_g_p_1a69e98f453f5bcb2cf2c76469f91fab24" kindref="member">sigma()</ref> is more efficient because some computations are shared between <ref refid="classlimbo_1_1model_1_1_s_p_g_p_1a93dc0f879b84a302382edf103fa00da9" kindref="member">mu()</ref> and <ref refid="classlimbo_1_1model_1_1_s_p_g_p_1a69e98f453f5bcb2cf2c76469f91fab24" kindref="member">sigma()</ref>. \endrst </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="194" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="194" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1ad699ef0c60c08ad24513d16d6c4f0c26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; Eigen::MatrixXd, Eigen::MatrixXd &gt;</type>
        <definition>std::pair&lt;Eigen::MatrixXd, Eigen::MatrixXd&gt; limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::predict</definition>
        <argsstring>(const Eigen::MatrixXd &amp;xt) const </argsstring>
        <name>predict</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>xt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst return :math:<computeroutput>\mu</computeroutput>, :math:<computeroutput>\sigma^2</computeroutput>. Predict a bunch of points. \endrst </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="205" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a93dc0f879b84a302382edf103fa00da9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::mu</definition>
        <argsstring>(const Eigen::MatrixXd &amp;v) const </argsstring>
        <name>mu</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst return :math:<computeroutput>\mu</computeroutput> (unormalized). If there is no sample, return the value according to the mean function. \endrst </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="215" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1ab7cd17b138cae0693ebec8101b401ee0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt;Eigen::VectorXd&gt; limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::mu_mult</definition>
        <argsstring>(const Eigen::MatrixXd &amp;v) const </argsstring>
        <name>mu_mult</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="219" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a69e98f453f5bcb2cf2c76469f91fab24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::sigma</definition>
        <argsstring>(const Eigen::VectorXd &amp;v) const </argsstring>
        <name>sigma</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst return :math:<computeroutput>\sigma^2</computeroutput> (unormalized). If there is no sample, return the max :math:<computeroutput>\sigma^2</computeroutput>. \endrst </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="229" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1aed832adbf5fcfa305aac4699d809677e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::sigma_mult</definition>
        <argsstring>(const Eigen::MatrixXd &amp;v) const </argsstring>
        <name>sigma_mult</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="234" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1ab84d7663a814757766c2d630e0bacd9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::dim_in</definition>
        <argsstring>() const </argsstring>
        <name>dim_in</name>
        <briefdescription>
<para>return the number of dimensions of the input </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="240" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="240" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a605b47cf6ecf50c2436cbad531099d16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::dim_out</definition>
        <argsstring>() const </argsstring>
        <name>dim_out</name>
        <briefdescription>
<para>return the number of dimensions of the output </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="247" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="247" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a4bb34b4001647ebbfd0e949b35c39a0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const MeanFunction &amp;</type>
        <definition>const MeanFunction&amp; limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::mean_function</definition>
        <argsstring>() const </argsstring>
        <name>mean_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="257" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1afd6a1362afffaff3ed58ab17b49bd0b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>MeanFunction &amp;</type>
        <definition>MeanFunction&amp; limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::mean_function</definition>
        <argsstring>()</argsstring>
        <name>mean_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="258" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a579bcd7df20371291633b45be1ec73b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::max_observation</definition>
        <argsstring>() const </argsstring>
        <name>max_observation</name>
        <briefdescription>
<para>return the maximum observation (only call this if the output of the <ref refid="classlimbo_1_1model_1_1_g_p" kindref="compound">GP</ref> is of dimension 1) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="261" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="261" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a1d586dd8c2b9a1bce6ab3b39ba42c380" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::mean_observation</definition>
        <argsstring>() const </argsstring>
        <name>mean_observation</name>
        <briefdescription>
<para>return the mean observation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="271" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="271" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a9d3bcefa04f22fef8ad518358512154d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::nb_samples</definition>
        <argsstring>() const </argsstring>
        <name>nb_samples</name>
        <briefdescription>
<para>return the number of samples used to compute the <ref refid="classlimbo_1_1model_1_1_s_p_g_p" kindref="compound">SPGP</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="278" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a43c26bf3d36965be388aa4814cf144c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::nb_pseudo_samples</definition>
        <argsstring>() const </argsstring>
        <name>nb_pseudo_samples</name>
        <briefdescription>
<para>return the number of pseudo samples used to compute the <ref refid="classlimbo_1_1model_1_1_s_p_g_p" kindref="compound">SPGP</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="281" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a7443e10b67b9e4934572401ef099a517" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::recompute</definition>
        <argsstring>(bool update_obs_mean=true)</argsstring>
        <name>recompute</name>
        <param>
          <type>bool</type>
          <declname>update_obs_mean</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>recomputes the <ref refid="classlimbo_1_1model_1_1_s_p_g_p" kindref="compound">SPGP</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="284" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="284" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a867505eb41e8fe971eb7de28b2cea50f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt;Eigen::VectorXd&gt; limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::samples</definition>
        <argsstring>() const </argsstring>
        <name>samples</name>
        <briefdescription>
<para>return the list of samples that have been tested so far </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="291" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1aa5b380d8bd02f7a4a7a759038469b20b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt;Eigen::VectorXd&gt; limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::pseudo_samples</definition>
        <argsstring>() const </argsstring>
        <name>pseudo_samples</name>
        <briefdescription>
<para>return the list of pseudo-samples beign used </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="294" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a0f36e61908b422052019819cb8c8e57d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::test_likelihood</definition>
        <argsstring>(const Eigen::MatrixXd &amp;data, const Eigen::MatrixXd &amp;samples, const Eigen::MatrixXd &amp;observations)</argsstring>
        <name>test_likelihood</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>observations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="297" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="297" bodyend="317"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1ae5a54e9182e0c4ae6da4513a0b7e9c18" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_init</definition>
        <argsstring>(const std::vector&lt; Eigen::VectorXd &gt; &amp;samples, const std::vector&lt; Eigen::VectorXd &gt; &amp;observations)</argsstring>
        <name>_init</name>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>observations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="350" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a7269532d093198ca05cc207553b4d0b3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_init</definition>
        <argsstring>(const Eigen::MatrixXd &amp;samples, const Eigen::MatrixXd &amp;observations)</argsstring>
        <name>_init</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>observations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="354" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="354" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a620e853d703c6deab494cfd144b4e0f1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_compute_observations_zm</definition>
        <argsstring>()</argsstring>
        <name>_compute_observations_zm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="373" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="373" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1abbc2548ce6fda4900c2a0ef353fd258e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_update_m</definition>
        <argsstring>()</argsstring>
        <name>_update_m</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="382" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="382" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a2d21e07cdfdb513109031d22d4ee030d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_compute</definition>
        <argsstring>(bool optimize=true)</argsstring>
        <name>_compute</name>
        <param>
          <type>bool</type>
          <declname>optimize</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="390" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="390" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a461713d9653467a9036c4da4ed93ef68" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_optimize_hyperparams</definition>
        <argsstring>()</argsstring>
        <name>_optimize_hyperparams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="410" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="410" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a7d1867cf8e2b77750ccc9dccd579326b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__opt__tools_1ga362b55973a38ac71f27a06f9d9c14f24" kindref="member">opt::eval_t</ref></type>
        <definition>opt::eval_t limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_likelihood</definition>
        <argsstring>(const Eigen::VectorXd &amp;input, bool eval_grad=false) const </argsstring>
        <name>_likelihood</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>eval_grad</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="447" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="447" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a58ab361e0f9803db6ccb8f6e6370070a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__opt__tools_1ga362b55973a38ac71f27a06f9d9c14f24" kindref="member">opt::eval_t</ref></type>
        <definition>opt::eval_t limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_likelihood_wp</definition>
        <argsstring>(Eigen::MatrixXd &amp;xb, const Eigen::MatrixXd &amp;b, const double &amp;c, const double &amp;sig, const Eigen::MatrixXd &amp;samples, const Eigen::MatrixXd &amp;observations_zm, bool eval_grad, bool inverse) const </argsstring>
        <name>_likelihood_wp</name>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>xb</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>observations_zm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>eval_grad</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="454" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="454" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a9ac2f9a73d818f50859b2f6032b7cb33" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; Eigen::MatrixXd, Eigen::MatrixXd &gt;</type>
        <definition>std::pair&lt;Eigen::MatrixXd, Eigen::MatrixXd&gt; limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_predict</definition>
        <argsstring>(const Eigen::MatrixXd &amp;xt, bool calc_mu=true, bool calc_s2=true) const </argsstring>
        <name>_predict</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>xt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>calc_mu</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>calc_s2</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="583" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="583" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1aa42f76c834648c549ff310218b94e8f4" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_compute_kernel_matrix</definition>
        <argsstring>(const Eigen::MatrixXd &amp;p_1, const Eigen::MatrixXd &amp;p_2) const </argsstring>
        <name>_compute_kernel_matrix</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>p_1</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>p_2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="613" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="613" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a5142aee59df9a86c321fcbdcbec25304" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_k_diag</definition>
        <argsstring>(const Eigen::MatrixXd &amp;x) const </argsstring>
        <name>_k_diag</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="631" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="631" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1ad8d8799b7123ff1e97f6f811b0b68dbe" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_dist</definition>
        <argsstring>(const Eigen::MatrixXd &amp;x_0, const Eigen::MatrixXd &amp;x_1) const </argsstring>
        <name>_dist</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x_0</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>x_1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="638" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="638" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1ac577ca1ebd40b15871fa869e68b54f7a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_to_matrix</definition>
        <argsstring>(const std::vector&lt; Eigen::VectorXd &gt; &amp;xs) const </argsstring>
        <name>_to_matrix</name>
        <param>
          <type>const std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="645" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="645" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a3089c6e2fbe3cabe80b3c1d51c899cc1" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_to_matrix</definition>
        <argsstring>(std::vector&lt; Eigen::VectorXd &gt; &amp;xs) const </argsstring>
        <name>_to_matrix</name>
        <param>
          <type>std::vector&lt; Eigen::VectorXd &gt; &amp;</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="653" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="653" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1ae5cc9b5366531041071f60f58885205b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt;Eigen::VectorXd&gt; limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_to_vector</definition>
        <argsstring>(const Eigen::MatrixXd &amp;m) const </argsstring>
        <name>_to_vector</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="657" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="657" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="classlimbo_1_1model_1_1_s_p_g_p_1a1dcbd412dc54090bcaa9ecadf00cb2f9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; Eigen::VectorXd &gt;</type>
        <definition>std::vector&lt;Eigen::VectorXd&gt; limbo::model::SPGP&lt; Params, KernelFunction, MeanFunction, HyperParamsOptimizer &gt;::_to_vector</definition>
        <argsstring>(Eigen::MatrixXd &amp;m) const </argsstring>
        <name>_to_vector</name>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="665" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="665" bodyend="665"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A classic Gaussian process. It is parametrized by:<itemizedlist>
<listitem><para>a mean function</para></listitem><listitem><para>[optionnal] an optimizer for the hyper-parameters </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" line="87" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/experimental/model/spgp.hpp" bodystart="87" bodyend="718"/>
    <listofallmembers>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ab18b311f4130379eedbce62ba0adb77e" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_b</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ad1c26250ae889d68bf2b3e36180b9e77" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_bet</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ad04af10d900d00bea91acdfa05cb522e" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_c</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a2d21e07cdfdb513109031d22d4ee030d" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_compute</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1aa42f76c834648c549ff310218b94e8f4" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_compute_kernel_matrix</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a620e853d703c6deab494cfd144b4e0f1" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_compute_observations_zm</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a028a497888607c4ed37c98cdfc27ff18" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_del</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a6f0bd4953cfe33e3f4fd72161746b5a9" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_dim_in</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a97860835ae506a735554193f6abf8fb6" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_dim_out</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ad8d8799b7123ff1e97f6f811b0b68dbe" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_dist</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a0465b3427af08498e04be5029ea92afb" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_hp_optimize</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ae5a54e9182e0c4ae6da4513a0b7e9c18" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_init</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a7269532d093198ca05cc207553b4d0b3" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_init</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a5142aee59df9a86c321fcbdcbec25304" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_k_diag</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ae363a3fd27b8eb151e9f36ac395486f6" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_kernel_function</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a7d1867cf8e2b77750ccc9dccd579326b" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_likelihood</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a58ab361e0f9803db6ccb8f6e6370070a" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_likelihood_wp</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a47f66f00a7ebf56f6af21a93c59b90ed" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_Lm</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1af7732cada911327067204eff96de3d9f" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_m</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a74f5412ac200cddfb897ddb92254dbf9" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_matrixL</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a5b9725afd7d8bda848de2cbe355cd6bd" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_mean_function</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a70408353da19fdf77ff1a4a21563a49d" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_obs_mean</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a5d708f51ec10b13b583c14f4911ae497" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_observations</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a70d9d83951bc759dea11e107173c4a81" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_observations_zm</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a461713d9653467a9036c4da4ed93ef68" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_optimize_hyperparams</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a300d8744cbd6bedfe31438776f840386" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_optimize_init</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1af17f8c7752bdde6160adefff8b472b66" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_optimized</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a9ac2f9a73d818f50859b2f6032b7cb33" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_predict</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a6b5392d0b0a42d80db53d1a19570469d" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_pseudo_samples</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a42930d25a507936b592d97578bcf9d5a" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_samples</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a071318d362daf62bafdd53ad0b9a68b7" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_sig</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ac577ca1ebd40b15871fa869e68b54f7a" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_to_matrix</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a3089c6e2fbe3cabe80b3c1d51c899cc1" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_to_matrix</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ae5cc9b5366531041071f60f58885205b" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_to_vector</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a1dcbd412dc54090bcaa9ecadf00cb2f9" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_to_vector</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1abbc2548ce6fda4900c2a0ef353fd258e" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_update_m</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a68ce952249467dade422d8fb3b08eeea" prot="private" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>_w_init</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a4d983fbcf5c625446065dbc939571c3d" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>add_sample</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a8113b7d23df0d1c2c7d5190a95490e9c" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>compute</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a4e05bf3a425ddd15fb0ad44b28bc2d56" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>compute</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1acd0309a5bb2380abc49d0fa26db1e631" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>compute</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ab84d7663a814757766c2d630e0bacd9e" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>dim_in</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a605b47cf6ecf50c2436cbad531099d16" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>dim_out</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a579bcd7df20371291633b45be1ec73b4" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>max_observation</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a4bb34b4001647ebbfd0e949b35c39a0c" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>mean_function</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1afd6a1362afffaff3ed58ab17b49bd0b4" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>mean_function</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a1d586dd8c2b9a1bce6ab3b39ba42c380" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>mean_observation</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a93dc0f879b84a302382edf103fa00da9" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>mu</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ab7cd17b138cae0693ebec8101b401ee0" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>mu_mult</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a43c26bf3d36965be388aa4814cf144c5" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>nb_pseudo_samples</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a9d3bcefa04f22fef8ad518358512154d" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>nb_samples</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a942a3f77cffebf2210203da69d2329d4" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>optimize_hyperparams</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1ad699ef0c60c08ad24513d16d6c4f0c26" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>predict</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1aa5b380d8bd02f7a4a7a759038469b20b" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>pseudo_samples</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a42182a521e79e95b7e9cc4f1cd256650" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>query</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a7443e10b67b9e4934572401ef099a517" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>recompute</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a867505eb41e8fe971eb7de28b2cea50f" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>samples</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a69e98f453f5bcb2cf2c76469f91fab24" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>sigma</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1aed832adbf5fcfa305aac4699d809677e" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>sigma_mult</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a7052cad1d905c48e673f2a843d2643c9" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>SPGP</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a6fe55238f690cfba7dc1de3e6ad25ac3" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>SPGP</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a9fd5b3f449fd1a17e8699e9771ceae7d" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>SPGP</name></member>
      <member refid="classlimbo_1_1model_1_1_s_p_g_p_1a0f36e61908b422052019819cb8c8e57d" prot="public" virt="non-virtual"><scope>limbo::model::SPGP</scope><name>test_likelihood</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
