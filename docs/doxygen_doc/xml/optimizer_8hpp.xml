<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="optimizer_8hpp" kind="file" language="C++">
    <compoundname>optimizer.hpp</compoundname>
    <includes local="no">tuple</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">boost/optional.hpp</includes>
    <includedby refid="chained_8hpp" local="no">/tmp/doc_limbo/limbo/src/limbo/opt/chained.hpp</includedby>
    <includedby refid="cmaes_8hpp" local="no">/tmp/doc_limbo/limbo/src/limbo/opt/cmaes.hpp</includedby>
    <includedby refid="grid__search_8hpp" local="no">/tmp/doc_limbo/limbo/src/limbo/opt/grid_search.hpp</includedby>
    <includedby refid="nlopt__grad_8hpp" local="no">/tmp/doc_limbo/limbo/src/limbo/opt/nlopt_grad.hpp</includedby>
    <includedby refid="nlopt__no__grad_8hpp" local="no">/tmp/doc_limbo/limbo/src/limbo/opt/nlopt_no_grad.hpp</includedby>
    <includedby refid="parallel__repeater_8hpp" local="no">/tmp/doc_limbo/limbo/src/limbo/opt/parallel_repeater.hpp</includedby>
    <includedby refid="rprop_8hpp" local="no">/tmp/doc_limbo/limbo/src/limbo/opt/rprop.hpp</includedby>
    <includedby refid="opt_8hpp" local="no">/tmp/doc_limbo/limbo/src/limbo/opt.hpp</includedby>
    <incdepgraph>
      <node id="1193">
        <label>/tmp/doc_limbo/limbo/src/limbo/opt/optimizer.hpp</label>
        <link refid="optimizer.hpp"/>
        <childnode refid="1194" relation="include">
        </childnode>
        <childnode refid="1195" relation="include">
        </childnode>
        <childnode refid="1196" relation="include">
        </childnode>
      </node>
      <node id="1195">
        <label>Eigen/Core</label>
      </node>
      <node id="1194">
        <label>tuple</label>
      </node>
      <node id="1196">
        <label>boost/optional.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1213">
        <label>/tmp/doc_limbo/limbo/src/limbo/opt/rprop.hpp</label>
        <link refid="rprop_8hpp"/>
        <childnode refid="1209" relation="include">
        </childnode>
        <childnode refid="1211" relation="include">
        </childnode>
        <childnode refid="1212" relation="include">
        </childnode>
        <childnode refid="1199" relation="include">
        </childnode>
      </node>
      <node id="1202">
        <label>/tmp/doc_limbo/limbo/src/limbo/bayes_opt/boptimizer.hpp</label>
        <link refid="boptimizer_8hpp"/>
        <childnode refid="1203" relation="include">
        </childnode>
        <childnode refid="1204" relation="include">
        </childnode>
      </node>
      <node id="1197">
        <label>/tmp/doc_limbo/limbo/src/limbo/opt/optimizer.hpp</label>
        <link refid="optimizer.hpp"/>
        <childnode refid="1198" relation="include">
        </childnode>
        <childnode refid="1201" relation="include">
        </childnode>
        <childnode refid="1205" relation="include">
        </childnode>
        <childnode refid="1206" relation="include">
        </childnode>
        <childnode refid="1207" relation="include">
        </childnode>
        <childnode refid="1208" relation="include">
        </childnode>
        <childnode refid="1213" relation="include">
        </childnode>
        <childnode refid="1199" relation="include">
        </childnode>
      </node>
      <node id="1206">
        <label>/tmp/doc_limbo/limbo/src/limbo/opt/nlopt_grad.hpp</label>
        <link refid="nlopt__grad_8hpp"/>
        <childnode refid="1199" relation="include">
        </childnode>
      </node>
      <node id="1204">
        <label>/tmp/doc_limbo/limbo/src/limbo/experimental/bayes_opt/parego.hpp</label>
        <link refid="parego_8hpp"/>
      </node>
      <node id="1210">
        <label>/tmp/doc_limbo/limbo/src/limbo/model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="1200" relation="include">
        </childnode>
      </node>
      <node id="1200">
        <label>/tmp/doc_limbo/limbo/src/limbo/limbo.hpp</label>
        <link refid="limbo_8hpp"/>
      </node>
      <node id="1208">
        <label>/tmp/doc_limbo/limbo/src/limbo/opt/parallel_repeater.hpp</label>
        <link refid="parallel__repeater_8hpp"/>
        <childnode refid="1209" relation="include">
        </childnode>
        <childnode refid="1211" relation="include">
        </childnode>
        <childnode refid="1212" relation="include">
        </childnode>
        <childnode refid="1199" relation="include">
        </childnode>
      </node>
      <node id="1198">
        <label>/tmp/doc_limbo/limbo/src/limbo/opt/chained.hpp</label>
        <link refid="chained_8hpp"/>
        <childnode refid="1199" relation="include">
        </childnode>
      </node>
      <node id="1209">
        <label>/tmp/doc_limbo/limbo/src/limbo/model/gp/kernel_lf_opt.hpp</label>
        <link refid="kernel__lf__opt_8hpp"/>
        <childnode refid="1210" relation="include">
        </childnode>
      </node>
      <node id="1212">
        <label>/tmp/doc_limbo/limbo/src/limbo/model/gp/mean_lf_opt.hpp</label>
        <link refid="mean__lf__opt_8hpp"/>
        <childnode refid="1210" relation="include">
        </childnode>
      </node>
      <node id="1199">
        <label>/tmp/doc_limbo/limbo/src/limbo/opt.hpp</label>
        <link refid="opt_8hpp"/>
        <childnode refid="1200" relation="include">
        </childnode>
      </node>
      <node id="1211">
        <label>/tmp/doc_limbo/limbo/src/limbo/model/gp/kernel_mean_lf_opt.hpp</label>
        <link refid="kernel__mean__lf__opt_8hpp"/>
        <childnode refid="1210" relation="include">
        </childnode>
      </node>
      <node id="1207">
        <label>/tmp/doc_limbo/limbo/src/limbo/opt/nlopt_no_grad.hpp</label>
        <link refid="nlopt__no__grad_8hpp"/>
        <childnode refid="1199" relation="include">
        </childnode>
      </node>
      <node id="1201">
        <label>/tmp/doc_limbo/limbo/src/limbo/opt/cmaes.hpp</label>
        <link refid="cmaes_8hpp"/>
        <childnode refid="1202" relation="include">
        </childnode>
        <childnode refid="1199" relation="include">
        </childnode>
      </node>
      <node id="1203">
        <label>/tmp/doc_limbo/limbo/src/limbo/bayes_opt.hpp</label>
        <link refid="bayes__opt_8hpp"/>
        <childnode refid="1200" relation="include">
        </childnode>
      </node>
      <node id="1205">
        <label>/tmp/doc_limbo/limbo/src/limbo/opt/grid_search.hpp</label>
        <link refid="grid__search_8hpp"/>
        <childnode refid="1199" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacelimbo">limbo</innernamespace>
    <innernamespace refid="namespacelimbo_1_1opt">limbo::opt</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LIMBO_OPT_OPTIMIZER_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIMBO_OPT_OPTIMIZER_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/optional.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelimbo" kindref="compound">limbo</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">opt<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="group__opt__tools_1ga7fc87080ebf563d050fc547d25528ef0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;double,<sp/>boost::optional&lt;Eigen::VectorXd&gt;&gt;<sp/><ref refid="group__opt__tools_1ga7fc87080ebf563d050fc547d25528ef0" kindref="member">eval_t</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="group__opt__tools_1ga38e53ccac21f452bd31e9b239985d456" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval_t<sp/><ref refid="group__opt__tools_1ga38e53ccac21f452bd31e9b239985d456" kindref="member">no_grad</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eval_t{x,<sp/>boost::optional&lt;Eigen::VectorXd&gt;{}};<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="group__opt__tools_1gaf28d9af930b2993024ab497b285e0521" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd&amp;<sp/><ref refid="group__opt__tools_1gaf28d9af930b2993024ab497b285e0521" kindref="member">grad</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eval_t&amp;<sp/>fg)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(std::get&lt;1&gt;(fg).is_initialized());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;1&gt;(fg).</highlight><highlight class="keyword">get</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="group__opt__tools_1ga68ad00d7501bc26a2a0990bac762393e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="group__opt__tools_1ga68ad00d7501bc26a2a0990bac762393e" kindref="member">fun</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eval_t&amp;<sp/>fg)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(fg);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="40" refid="group__opt__tools_1ga698d932ac52cab812742b1300f875372" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="group__opt__tools_1ga698d932ac52cab812742b1300f875372" kindref="member">eval</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd&amp;<sp/>x)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(f(x,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="48" refid="group__opt__tools_1ga6abbcdf8d83abca89802881d883fb9e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval_t<sp/><ref refid="group__opt__tools_1ga6abbcdf8d83abca89802881d883fb9e3" kindref="member">eval_grad</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd&amp;<sp/>x)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(x,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/tmp/doc_limbo/limbo/src/limbo/opt/optimizer.hpp"/>
  </compounddef>
</doxygen>
