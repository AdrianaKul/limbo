<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="namespacelimbo_1_1tools" kind="namespace" language="C++">
    <compoundname>limbo::tools</compoundname>
    <innerclass refid="classlimbo_1_1tools_1_1_random_generator" prot="public">limbo::tools::RandomGenerator</innerclass>
    <innernamespace refid="namespacelimbo_1_1tools_1_1par">limbo::tools::par</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__tools_1gab2609bfef1e3bdb8b44c0d6c8c139927" prot="public" static="no">
        <type>std::uniform_real_distribution&lt; double &gt;</type>
        <definition>using limbo::tools::rdist_double_t = typedef std::uniform_real_distribution&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>rdist_double_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/random_generator.hpp" line="73" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/random_generator.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__tools_1gacb322b4600b2e500dbcd24661a749f49" prot="public" static="no">
        <type>std::uniform_int_distribution&lt; int &gt;</type>
        <definition>using limbo::tools::rdist_int_t = typedef std::uniform_int_distribution&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>rdist_int_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/random_generator.hpp" line="75" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/random_generator.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__tools_1gacdb2963659056fc5fa9f94405f59a851" prot="public" static="no">
        <type><ref refid="classlimbo_1_1tools_1_1_random_generator" kindref="compound">RandomGenerator</ref>&lt; <ref refid="group__tools_1gab2609bfef1e3bdb8b44c0d6c8c139927" kindref="member">rdist_double_t</ref> &gt;</type>
        <definition>using limbo::tools::rgen_double_t = typedef RandomGenerator&lt;rdist_double_t&gt;</definition>
        <argsstring></argsstring>
        <name>rgen_double_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Double random number generator </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/random_generator.hpp" line="79" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/random_generator.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__tools_1ga3df78ebcb864be91e73e840bb42b9208" prot="public" static="no">
        <type><ref refid="classlimbo_1_1tools_1_1_random_generator" kindref="compound">RandomGenerator</ref>&lt; <ref refid="group__tools_1gacb322b4600b2e500dbcd24661a749f49" kindref="member">rdist_int_t</ref> &gt;</type>
        <definition>using limbo::tools::rgen_int_t = typedef RandomGenerator&lt;rdist_int_t&gt;</definition>
        <argsstring></argsstring>
        <name>rgen_int_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>integer random number generator </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/random_generator.hpp" line="83" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/random_generator.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__tools_1ga029807776f0b7f44f806e4f9d92e34e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd limbo::tools::make_vector</definition>
        <argsstring>(double x)</argsstring>
        <name>make_vector</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>make a 1-D vector from a double (useful when we need to return vectors) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" line="54" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacelimbo_1_1tools_1ac56ad2bccc403ffa8341394f2fc28cda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int limbo::tools::signum</definition>
        <argsstring>(T x, std::false_type is_signed)</argsstring>
        <name>signum</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::false_type</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" line="62" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacelimbo_1_1tools_1a5e6d3a39db3c143a271eac9625f9779e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int limbo::tools::signum</definition>
        <argsstring>(T x, std::true_type is_signed)</argsstring>
        <name>signum</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::true_type</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" line="68" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__tools_1ga156cca8d927600da93054c952247857b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int limbo::tools::signum</definition>
        <argsstring>(T x)</argsstring>
        <name>signum</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return -1 if x &lt; 0; return 0 if x = 0; return 1 if x &gt; 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" line="78" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="group__tools_1gabcb0caa2ffabd42fa865c9ab0b624681" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_arithmetic&lt; T &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool limbo::tools::is_nan_or_inf</definition>
        <argsstring>(T v)</argsstring>
        <name>is_nan_or_inf</name>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return true if v is nan (not a number) or infinity </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" line="86" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__tools_1gaf4ca69df04108670f0cc61e4a8ae7367" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_arithmetic&lt; T &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool limbo::tools::is_nan_or_inf</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>is_nan_or_inf</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return true if v is nan (not a number) or infinity (const version) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" line="95" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__tools_1ga2a64df3120a3ecd84e62640fb43722d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd limbo::tools::random_vector</definition>
        <argsstring>(int size)</argsstring>
        <name>random_vector</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>random vector in [0, 1]</para><para><itemizedlist>
<listitem><para>this function is thread safe because the random number generator we use is thread-safe</para></listitem><listitem><para>we use a C++11 random number generator </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/random_generator.hpp" line="90" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/random_generator.hpp" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__tools_1gafb48d3271e7423f8b8d94599869bd9cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string limbo::tools::date</definition>
        <argsstring>()</argsstring>
        <name>date</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>easy way to get the current date </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/sys.hpp" line="46" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/sys.hpp" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="group__tools_1ga4810ffa502d791d6ad750739a953f56f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string limbo::tools::hostname</definition>
        <argsstring>()</argsstring>
        <name>hostname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>easy way to get the hostame </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/sys.hpp" line="57" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/sys.hpp" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="group__tools_1ga4ee13d198367d07cabd37316e671db09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string limbo::tools::getpid</definition>
        <argsstring>()</argsstring>
        <name>getpid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>easy way to get the PID </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/doc_limbo/limbo/src/limbo/tools/sys.hpp" line="68" column="1" bodyfile="/tmp/doc_limbo/limbo/src/limbo/tools/sys.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/tmp/doc_limbo/limbo/src/limbo/tools/math.hpp" line="50" column="1"/>
  </compounddef>
</doxygen>
